--Project Grow A Garden Nic
local replicated_storage = game:GetService("ReplicatedStorage")
local data = replicated_storage:FindFirstChild("Data")
local cosmetic_data = require(data:FindFirstChild("CosmeticItemShopData"))
local modules = replicated_storage:FindFirstChild("Modules")
local mutation_handler = require(modules:FindFirstChild("MutationHandler"))
local Mc1 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.AmericanMerchantShopData)
local Mc2 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.GnomeMerchantShopData)
local Mc3 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.HoneyMerchantShopData)
local Mc4 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.SkyMerchantShopData)
local Mc5 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.SprayMerchantShopData)
local Mc6 = require(game:GetService("ReplicatedStorage").Data.TravelingMerchant.TravelingMerchantData.SummerMerchantShopData)
local Event_Data = require(game:GetService("ReplicatedStorage").Data.EventShopData)
--[[
local seed_data = require(data:FindFirstChild("SeedData"))
local egg_data = require(data:FindFirstChild("PetEggData"))
l0cal gear_data = require(data:FindFirstChild("GearData"))
]]--



_G.AllMutations = {}
_G.AllShopCosmetic = {}
_G.AllMerchant = {}
_G.AllEvent = {}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RecipeModule = require(ReplicatedStorage.Data.CraftingData.CraftingRecipeRegistry)

local recipes = RecipeModule.ItemRecipes

_G.ListCraftSeed = {}
_G.ListCraftGear = {}

for recipeName, data in pairs(recipes) do
    for _, machine in ipairs(data.MachineTypes or {}) do
        if machine == "SeedEventWorkbench" then
            table.insert(_G.ListCraftSeed, recipeName)
        elseif machine == "GearEventWorkbench" then
            table.insert(_G.ListCraftGear, recipeName)
        end
    end
end

table.insert(_G.AllShopCosmetic, "All")
table.insert(_G.AllShopCosmetic, "Beach Crate")
table.insert(_G.AllShopCosmetic, "Sign Crate")
for _, v in cosmetic_data do
    table.insert(_G.AllShopCosmetic, v.CosmeticName)
end

table.insert(_G.AllMerchant, "All")
for _, merchantData in pairs({Mc1, Mc2, Mc3, Mc4, Mc5, Mc6}) do
    for name, data in pairs(merchantData) do
        table.insert(_G.AllMerchant, name)
    end
end

table.insert(_G.AllEvent, "All")
for _, v in Event_Data do
    table.insert(_G.AllEvent, v.SeedName)
end

--[[
for _, v in gear_data do
    if v.StockChance > 0 then
        table.insert(gear_names, v.GearName)
    end
end
for _, v in egg_data do
    if v.StockChance > 0 then
        table.insert(egg_names, v.EggName)
    end
end
for i, v in seed_data do
    if v.StockChance > 0 then
        table.insert(seed_names, i)
    end
end
]]--

table.insert(_G.AllMutations, "All")
table.insert(_G.AllMutations, "Gold")
table.insert(_G.AllMutations, "Rainbow")
for i, _ in mutation_handler.MutationNames do
    table.insert(_G.AllMutations, i)
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Rc Hub (0.0.1)",
    SubTitle = "Grow A Garden",
    TabWidth = 120,
    Size = UDim2.fromOffset(500, 320),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
})


local Tabs = {
    home = Window:AddTab({ Title = "Home", Icon = "globe" }),
    main = Window:AddTab({ Title = "Main", Icon = "chart-bar-stacked" }),
    pet = Window:AddTab({ Title = "Pet", Icon = "bone" }),
    event = Window:AddTab({ Title = "Event", Icon = "calendar-days" }),
    shop = Window:AddTab({ Title = "Shop", Icon = "shopping-cart" }),
    craft = Window:AddTab({ Title = "Craft", Icon = "wrench" }),
    misc = Window:AddTab({ Title = "Experiment", Icon = "flask-conical" }),
    esp = Window:AddTab({ Title = "Esp", Icon = "eye" }),
    ui = Window:AddTab({ Title = "Ui Setting", Icon = "settings" })
}

local Options = Fluent.Options

local player = game:GetService("Players").LocalPlayer
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Backpack = LocalPlayer:WaitForChild("Backpack")
local SeedData = require(ReplicatedStorage.Data.SeedData)
local Character = player.Character or player.CharacterAdded:Wait()
local GameEvents = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents")
local virtual_user = game:GetService("VirtualUser")
local SprinklerService = ReplicatedStorage.GameEvents.SprinklerService

game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Gear.Visible = true
game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Pets.Visible = true

local v22 = Instance.new("ScreenGui");
local v23 = Instance.new("ImageButton");
local v24 = Instance.new("UICorner");
local v25 = Instance.new("ParticleEmitter");
local v26 = game:GetService("TweenService");
v22.Parent = game.CoreGui;
v22.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
v23.Parent = v22;
v23.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
v23.BorderSizePixel = 0;
v23.Position = UDim2.new(0.120833337 - 0.1, 0, 0.0952890813 + 0.01, 0);
v23.Size = UDim2.new(0, 50, 0, 50);
v23.Draggable = true;
v23.Image = "http://www.roblox.com/asset/?id=124526064259356";
v24.Parent = v23;
v24.CornerRadius = UDim.new(0, 12);
v25.Parent = v23;
v25.LightEmission = 1;
v25.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.1),
    NumberSequenceKeypoint.new(1, 0)
});
v25.Lifetime = NumberRange.new(0.5, 1);
v25.Rate = 0;
v25.Speed = NumberRange.new(5, 10);
v25.Color = ColorSequence.new(Color3.fromRGB(255, 85, 255), Color3.fromRGB(85, 255, 255));
local v47 = v26:Create(v23, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
    Rotation = 360
});
v23.MouseButton1Down:Connect(function()
    v25.Rate = 100;
    task.delay(1, function()
        v25.Rate = 0;
    end);
    v47:Play();
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game);
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.RightControl, false, game);
    v47.Completed:Connect(function()
        v23.Rotation = 0;
    end);
    local v235 = v26:Create(v23, TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
        Size = UDim2.new(0, 60, 0, 60)
    });
    v235:Play();
    v235.Completed:Connect(function()
        local v483 = v26:Create(v23, TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
            Size = UDim2.new(0, 50, 0, 50)
        });
        v483:Play();
    end);
end);

player.Idled:Connect(function()
    virtual_user:CaptureController()
    virtual_user:ClickButton2(Vector2.new())
end)


--[[
_G.SeedData = {"All"}
_G.SeedData2 = {"None"}

for _, data in pairs(SeedData) do
	if data.SeedName then
		local fruitName = data.SeedName:gsub(" Seed$", "")  -- Hapus ' Seed' di akhir
		table.insert(_G.SeedData, fruitName)
		table.insert(_G.SeedData2, fruitName)
	end
end
]]--

local v1
local v3

_G.SprinkSelect = {}
_G.AllowedMutations = {}
_G.AllowedFruits = {}
_G.AvoidFruits = {}

task.spawn(function()
	while wait(1) do

		_G.AllowedDict = {}
		for _, name in ipairs(_G.AllowedMutations) do
			if name ~= "All" then
				_G.AllowedDict[name] = true
			end
		end

		_G.AllowedFruitDict = {}
		if type(_G.AllowedFruits) == "table" then
			for _, name in ipairs(_G.AllowedFruits) do
				_G.AllowedFruitDict[name] = true
			end
		end

		_G.AvoidFruitDict = {}
		if type(_G.AvoidFruits) == "table" and _G.AvoidFruits[1] ~= "None" then
			for _, name in ipairs(_G.AvoidFruits) do
				_G.AvoidFruitDict[name] = true
			end
		end
	end
end)

function N(t)
    local Notification = require(ReplicatedStorage.Modules.Notification)
    Notification:CreateNotification(t)
end

_G.TargetLocation = nil
function SetTargetLocation()
    local root = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
    _G.TargetLocation = root.CFrame
end

function AntiAfk()
    local vim = game:GetService("VirtualInputManager")
	vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
	task.wait(0.1)
	vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
end

local function GetMyFarm()
	for _, farm in pairs(workspace.Farm:GetChildren()) do
		local owner = farm:FindFirstChild("Important")
			and farm.Important:FindFirstChild("Data")
			and farm.Important.Data:FindFirstChild("Owner")
		if owner and owner.Value == LocalPlayer.Name then
			return farm
		end
	end
end

function GetFruitCounts()
	local farm = GetMyFarm()
	if not farm then return {} end

	local plantFolder = farm.Important:FindFirstChild("Plants_Physical")
	if not plantFolder then return {} end

	local fruitCounts = {}
	for _, desc in pairs(plantFolder:GetDescendants()) do
		if desc:IsA("ProximityPrompt") and desc.Enabled then
			local fruit = desc:FindFirstAncestorWhichIsA("Model")
			if fruit then
				local name = fruit.Name
				fruitCounts[name] = (fruitCounts[name] or 0) + 1
			end
		end
	end

	return fruitCounts
end

function GetTreeCounts()
    local farm = GetMyFarm()
    if not farm then return {} end

    local plantFolder = farm.Important:FindFirstChild("Plants_Physical")
    if not plantFolder then return {} end

    local fruitCounts = {}
    for _, desc in pairs(plantFolder:GetChildren()) do
        if desc:IsA("Model") then
            local name = desc.Name
            fruitCounts[name] = (fruitCounts[name] or 0) + 1
        end
    end

    return fruitCounts
end

function GetAllSprinklerNames()
    local Data = require(game:GetService("ReplicatedStorage").Data.SprinklerData)
    local sprinklerList = {}

    for name, _ in pairs(Data.SprinklerBoxSizes) do
        table.insert(sprinklerList, name)
    end

    return sprinklerList
end

function PressE()
	local vim = game:GetService("VirtualInputManager")
	vim:SendKeyEvent(true, Enum.KeyCode.E, false, game)
	task.wait(0.1)
	vim:SendKeyEvent(false, Enum.KeyCode.E, false, game)
end

function EquipItemByName(partialName)
	local backpack = game.Players.LocalPlayer:WaitForChild("Backpack")
	local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

	local lowerPartial = partialName:lower()

	for _, item in ipairs(backpack:GetChildren()) do
		if item.Name:lower():find(lowerPartial) then
			item.Parent = character
			return item
		end
	end

	warn("❌ Tidak ditemukan item dengan nama mengandung:", partialName)
	return nil
end

local function DeleteMySprinklers()
    local farm = GetMyFarm()
    if not farm then
        warn("Farm kamu tidak ditemukan!")
        return
    end

    local important = farm:FindFirstChild("Important")
    if not important then
        warn("Tidak ada folder Important di farm.")
        return
    end

    local objectPhysical = important:FindFirstChild("Objects_Physical")
    if not objectPhysical then
        warn("Tidak ada folder Objects_Physical di Important.")
        return
    end

    for _, obj in ipairs(objectPhysical:GetChildren()) do
        if obj:IsA("Model") and obj.Name:lower():find("sprinkler") then
            if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") and game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Shovel [Destroy Plants]") then
                game.Players.LocalPlayer.Character:FindFirstChild("Humanoid"):EquipTool(game:GetService("Players").LocalPlayer.Backpack["Shovel [Destroy Plants]"])
            end
            game.ReplicatedStorage.GameEvents.DeleteObject:FireServer(obj)
        end
    end
end

local function EquipTool(tool)
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid:UnequipTools()
    tool.Parent = character
end

local function TryPlaceSprinklers()
    local farm = GetMyFarm()
    if not farm then return end

    local placedFolder = farm.Important:FindFirstChild("Objects_Physical")
    if not placedFolder then return end

    for _, name in ipairs(_G.SprinkSelect or {}) do
        -- Cek apakah sprinkler dengan nama ini sudah ada di farm
        local alreadyPlaced = placedFolder:FindFirstChild(name)
        if alreadyPlaced then
            warn(name .. " sudah terpasang, skip")
            continue
        end

        -- Cari di backpack dengan prefix match (karena ada [xN])
        local tool = nil
        for _, item in ipairs(Backpack:GetChildren()) do
            if typeof(item.Name) == "string" and item.Name:match("^" .. name) then
                tool = item
                break
            end
        end

        if not tool then
            warn(name .. " tidak ditemukan di Backpack")
            continue
        end

        -- Equip dan pasang
        EquipTool(tool)
        task.wait(0.1)
        SprinklerService:FireServer("Create", _G.TargetLocation)
        task.wait(0.1)
    end
end

_G.TreeCount = {}
_G.NewFruitCount = {}
_G.SprinkList = GetAllSprinklerNames()
_G.dropdownValues1 = {"All"}
_G.dropdownValues2 = {"None"}

local counts = GetFruitCounts()
for name, count in pairs(counts) do
    table.insert(_G.NewFruitCount, name .. " x" .. count)
    table.insert(_G.dropdownValues1, name .. " x" .. count)
    table.insert(_G.dropdownValues2, name)
end
for name, count in pairs(GetTreeCounts()) do
    table.insert(_G.TreeCount, name .. " x" .. count)
end

local function HasAllowedMutation(fruit)

	if typeof(_G.AllowedMutations) == "table" and table.find(_G.AllowedMutations, "All") then
		return true
	end

	if typeof(_G.AllowedMutations) ~= "table" then
		return false
	end

	for _, attrName in ipairs(_G.AllowedMutations) do
		if fruit:GetAttribute(attrName) then
			return true
		end
	end

	return false
end

function DoCrafting(recipeName, itemsToEquip)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-92.78685, 3.80002713, -21.7897491, 0.012856354, 3.68827671e-08, 0.999917328, -8.46179091e-08, 1, -3.57978465e-08, -0.999917328, -8.41506917e-08, 0.012856354)

    wait()

    local A_1 = "SetRecipe"
    local A_2 = game:GetService("Workspace").Interaction.UpdateItems.DinoEvent.DinoCraftingTable
    local A_3 = "DinoEventWorkbench"
    local A_4 = recipeName
    local Event = game:GetService("ReplicatedStorage").GameEvents.CraftingGlobalObjectService
    Event:FireServer(A_1, A_2, A_3, A_4)

    wait()

    for _, itemName in ipairs(itemsToEquip) do
        EquipItemByName(itemName)
        wait(0.5)
        PressE()
    end

    wait(0.5)
    PressE()
end

function ClaimAvailableDinoQuests()
	local player = game:GetService("Players").LocalPlayer
	local taskFolder = player.PlayerGui:WaitForChild("DinoQuests_UI").Frame.Main.Holder.Tasks

	local segments = {}
	for _, child in ipairs(taskFolder:GetChildren()) do
		if child.Name == "Segment" then
			table.insert(segments, child)
		end
	end

	local event = game:GetService("ReplicatedStorage").GameEvents.ClaimDinoQuest

	for index, segment in ipairs(segments) do
		local claimButton = segment:FindFirstChild("Claim")
		if claimButton and claimButton.Visible then
			print("✅ Claiming quest segment #" .. index)
			event:InvokeServer(index)
		else
			print("❌ Segment #" .. index .. " not claimable")
		end
	end
end

function GetTreeTypes()
	local farm = GetMyFarm()
	if not farm then return {} end

	local plantFolder = farm.Important:FindFirstChild("Plants_Physical")
	if not plantFolder then return {} end

	local treeCount = {}
	for _, tree in ipairs(plantFolder:GetChildren()) do
		local name = tree.Name
		treeCount[name] = (treeCount[name] or 0) + 1
	end

	local dropdownList = {}
	for name, count in pairs(treeCount) do
		table.insert(dropdownList, name .. " x" .. count)
	end

	return dropdownList
end

function GetTrowel()
	local backpack = game.Players.LocalPlayer:WaitForChild("Backpack")
	for _, tool in ipairs(backpack:GetChildren()) do
		if tool.Name:lower():find("trowel") then
			tool.Parent = game.Players.LocalPlayer.Character
			print("🧰 Equipped trowel:", tool.Name)
			return tool
		end
	end
	warn("❌ Tidak menemukan Trowel di Backpack.")
	return nil
end

function FindClosestMatch(name)
    local function score(str1, str2)
        return string.lower(str1):match(string.lower(str2)) and #str2 or 0
    end

    local backpack = LocalPlayer.Backpack:GetChildren()
    local bestMatch, bestScore = nil, 0

    for _, item in ipairs(backpack) do
        local s = score(item.Name, name)
        if s > bestScore then
            bestMatch = item
            bestScore = s
        end
    end

    return bestMatch
end

function EquipReclaimer()
    for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") and string.find(tool.Name:lower(), "reclaimer") then
            LocalPlayer.Character.Humanoid:EquipTool(tool)
            return true
        end
    end
    return false
end

function AutoReclaimSelectedTrees()
    local farm = GetMyFarm()
    if not farm then return end

    local treeFolder = farm.Important:FindFirstChild("Plants_Physical")
    if not treeFolder then return end

    if not EquipReclaimer() then
        warn("Reclaimer not found!")
        return
    end

    local event = game:GetService("ReplicatedStorage").GameEvents:FindFirstChild("ReclaimerService_RE")
    if not event then return end

    for _, tree in ipairs(treeFolder:GetChildren()) do
        if tree:IsA("Model") then
            for _, selected in ipairs(_G.SelectTreeRC or {}) do
                if string.lower(tree.Name) == string.lower(selected) then
                    event:FireServer("TryReclaim", tree)
                    task.wait(0.2) -- delay kecil biar gak ke-block
                end
            end
        end
    end
end

_G.AutoPlant = fal
_G.SelectedSeedName = nil
_G.PlantMode = "Player Pos"
_G.TargetLocationXD = nil
_G.MinWeightKG = 0
_G.WeightCompareType = "Below"

local function GetBackpackSeeds()
	local list = {}
	for _, tool in ipairs(Backpack:GetChildren()) do
		if tool.Name:match("Seed %[%w+") then
			table.insert(list, tool.Name) -- tampilkan lengkap
		end
	end
	return list
end

local function EquipSeed(seedName)
	for _, tool in ipairs(Backpack:GetChildren()) do
		if tool.Name:match("^" .. seedName .. " Seed") then
			tool.Parent = Character
			print("🎒 Equip seed:", tool.Name)
			return true
		end
	end
	warn("❌ Seed tidak ditemukan:", seedName)
	return false
end

local function getPlayerPosition()
	local root = Character:FindFirstChild("HumanoidRootPart")
	return root and Vector3.new(root.Position.X, 0.13, root.Position.Z) or nil
end

local function getRandomPoint()
	local myFarm = GetMyFarm()
	if not myFarm then return nil end

	local PlantLocations = myFarm.Important:FindFirstChild("Plant_Locations")
	if not PlantLocations then return nil end

	local lands = PlantLocations:GetChildren()
	if #lands == 0 then return nil end

	local land = lands[math.random(1, #lands)]
	local pos = land.Position
	return Vector3.new(pos.X + math.random(-2, 2), 0.13, pos.Z + math.random(-2, 2))
end

function MoveAllTrees()
	if not _G.selectedTreeXX then
		warn("❌ Kamu belum memilih pohon.")
		return
	end

	if not _G.TargetLocation then
		warn("❌ Lokasi tujuan belum ditetapkan.")
		return
	end

	local myFarm = GetMyFarm()
	if not myFarm then
		warn("❌ Farm milikmu tidak ditemukan.")
		return
	end

	local plantFolder = myFarm.Important:FindFirstChild("Plants_Physical")
	if not plantFolder then
		warn("❌ Plants_Physical tidak ditemukan.")
		return
	end

    local moved = 0
    local Event = game:GetService("ReplicatedStorage").GameEvents.TrowelRemote
    local trowel = GetTrowel()
    if not trowel then return end

    local root = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

    for _, tree in ipairs(plantFolder:GetChildren()) do
    	if tree.Name == _G.selectedTreeXX then
		    GetTrowel()
		    if tree and tree:IsA("Model") then
		        root.CFrame = tree:GetPivot()
		        task.wait(0.5)
    
		        Event:InvokeServer("Pickup", trowel, tree)
		        task.wait(0.2)
    
	        	Event:InvokeServer("Place", trowel, tree, _G.TargetLocation)
		        moved += 1
	        	task.wait(0.3)
            else
                print("KEsalahan di temukan model / model cframe tidak ada")
	        end
	    end
    end
	print("✅ Total pohon yang dipindahkan:", moved)
end



local function IsAllowedFruit(fruit)
	local name = fruit.Name
	local allowed = false
	local avoided = false

	if typeof(_G.AllowedFruits) == "table" then
		if table.find(_G.AllowedFruits, "All") then
			allowed = true
		elseif _G.AllowedFruitDict and _G.AllowedFruitDict[name] then
			allowed = true
		end
	end

	if typeof(_G.AvoidFruits) == "table" then
		if not table.find(_G.AvoidFruits, "None") and _G.AvoidFruitDict and _G.AvoidFruitDict[name] then
			avoided = true
		end
	end

	return allowed and not avoided
end

local function KgAllowed(fruit)
    local SaveKG = true
    for _, Chk in pairs(fruit:GetChildren()) do
        if Chk:IsA("NumberValue") and Chk.Name == "Weight" then
            local weightValue = math.floor(Chk.Value)
            local minKG = _G.MinWeightKG or 0
            local compareType = _G.WeightCompareType or "Below"

            if compareType == "Above" then
                SaveKG = weightValue >= minKG
            elseif compareType == "Below" then
                SaveKG = weightValue <= minKG
            end
        end
    end

    return SaveKG
end

local function KgAllowed2(fruit)
    local SaveKG = true
    for _, Chk in pairs(fruit:GetChildren()) do
        if Chk:IsA("NumberValue") and Chk.Name == "Weight" then
            local weightValue = math.floor(Chk.Value)
            local minKG = _G.TargetKG or 0
            local compareType = _G.WeightCompareType2 or "Below"

            if compareType == "Above" then
                SaveKG = weightValue >= minKG
            elseif compareType == "Below" then
                SaveKG = weightValue <= minKG
            end
        end
    end

    return SaveKG
end

local function GetHarvestableFruits()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    if not character then
        print("[DEBUG] Character tidak ditemukan")
        return {}
    end

    local root = GetMyFarm()
    if not root then
        print("[DEBUG] Farm tidak ditemukan")
        return {}
    end

    local plantFolder = root.Important:FindFirstChild("Plants_Physical")
    if not plantFolder then
        print("[DEBUG] Plants_Physical tidak ditemukan")
        return {}
    end

    local fruits = {}
    local totalPrompt = 0
    local totalPassed = 0

    for _, desc in pairs(plantFolder:GetDescendants()) do
        if desc:IsA("ProximityPrompt") and desc.Enabled then
            totalPrompt += 1
            local fruit = desc:FindFirstAncestorWhichIsA("Model")

            if fruit then
                local passedMutation = HasAllowedMutation(fruit)
                local passedFruit = IsAllowedFruit(fruit)
                local passedKG = KgAllowed(fruit)

                if passedMutation and passedFruit and passedKG then
                    table.insert(fruits, fruit)
                    totalPassed += 1
                end
            end
        end
    end

    print("[DEBUG] Jumlah ProximityPrompt ditemukan:", totalPrompt)
    print("[DEBUG] Jumlah buah yang lolos filter:", totalPassed)

    return fruits
end

local function GetHarvestableFruitsWS()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    if not character then
        print("[DEBUG] Character tidak ditemukan")
        return {}
    end

    local root = GetMyFarm()
    if not root then
        print("[DEBUG] Farm tidak ditemukan")
        return {}
    end

    local plantFolder = root.Important:FindFirstChild("Plants_Physical")
    if not plantFolder then
        print("[DEBUG] Plants_Physical tidak ditemukan")
        return {}
    end

    local fruits = {}
    local totalPrompt = 0
    local totalPassed = 0

    for _, desc in pairs(plantFolder:GetDescendants()) do
        if desc:IsA("ProximityPrompt") and desc.Enabled then
            totalPrompt += 1
            local fruit = desc:FindFirstAncestorWhichIsA("Model")
            local passedFruit = IsAllowedFruit(fruit)

            if fruit then
                if passedFruit then
                    table.insert(fruits, fruit)
                    totalPassed += 1
                end
            end
        end
    end

    print("[DEBUG] Jumlah ProximityPrompt ditemukan:", totalPrompt)
    print("[DEBUG] Jumlah buah yang lolos filter:", totalPassed)

    return fruits
end

function HarvestFruits2(typeXX)
    local fruits = GetHarvestableFruitsWS() or {}

    if type(fruits) ~= "table" then
        warn("GetHarvestableFruits tidak mengembalikan table!")
        return
    end

    print("Jumlah buah:", #fruits)

    if typeXX == "Teleport" then
        print("Mode Teleport aktif")
    elseif typeXX == "PickUp Aura" then
        for _, fruit in ipairs(fruits) do
            pcall(function()
                ReplicatedStorage.ByteNetReliable:FireServer(buffer.fromstring("\001\001\000\001"), { fruit })
            end)
        end
    end
end

function HarvestFruits(typeXX)
	local fruits = GetHarvestableFruits() or {}
	
	if type(fruits) ~= "table" then
		warn("GetHarvestableFruits tidak mengembalikan table!")
		return
	end

	print("Jumlah buah:", #fruits)

	if typeXX == "Teleport" then
		print("Mode Teleport aktif")
	elseif typeXX == "PickUp Aura" then
		for _, fruit in ipairs(fruits) do
			pcall(function()
				ReplicatedStorage.ByteNetReliable:FireServer(buffer.fromstring("\001\001\000\001"), { fruit })
			end)
		end
	end
end

function ShovelTREE()
    local player = game.Players.LocalPlayer
    local char, bp = player.Character, player:FindFirstChild("Backpack")
    local tool = bp and bp:FindFirstChild("Shovel [Destroy Plants]")
    if char and tool then char:FindFirstChild("Humanoid"):EquipTool(tool) end

    local farm = GetMyFarm()
    local plants = farm.Important:FindFirstChild("Plants_Physical")
    if not plants then return end

    for _, model in ipairs(plants:GetChildren()) do
        if model:IsA("Model") and model.Name == _G.ShovelTargetTREE then
            for _, part in ipairs(model:GetDescendants()) do
                if part:IsA("Part") then
                    game.ReplicatedStorage.GameEvents.Remove_Item:FireServer(part)
                end
            end
        end
    end
end

function ShovelFRUIT()
    local player = game.Players.LocalPlayer
    local char = player.Character
    local backpack = player:FindFirstChild("Backpack")
    local shovel = backpack and backpack:FindFirstChild("Shovel [Destroy Plants]")

    if char and char:FindFirstChild("Humanoid") and shovel then
        char.Humanoid:EquipTool(shovel)
    end

    local root = GetMyFarm()
    local p = root.Important:FindFirstChild("Plants_Physical")
    if not p then return end

    for _, desc in pairs(p:GetDescendants()) do
        if desc:IsA("ProximityPrompt") then
            local fruit = desc:FindFirstAncestorWhichIsA("Model")
            local passedFruit = KgAllowed2(fruit)

            if fruit and fruit.Name == _G.ShoveltargetFRUIT and passedFruit then
                for _, part in ipairs(fruit:GetDescendants()) do
                    if part:IsA("Part") then
                        game:GetService("ReplicatedStorage").GameEvents.Remove_Item:FireServer(part)
                    end
                end
            end
        end
    end
end

-- [HOME] \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

local co = Tabs.home:AddParagraph({
    Title = "Developer",
    Content = "RexyCode"
})

-- [MAIN] \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

Tabs.main:AddSection("#-----[HARVEST FEATURE]-----#");

local v3x = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Method",
    Values = { "Teleport", "PickUp Aura" },
    Multi = false,
    Default = 2,
})

Tabs.main:AddSection("#-----#");

local v1 = Tabs.main:AddDropdown("MultiDropdown", {
    Title = "Select Fruit",
    Description = "",
    Values = _G.dropdownValues1,
    Multi = true,
    Default = {"All"},
})

local v2 = Tabs.main:AddDropdown("MultiDropdown", {
    Title = "Select Mutation",
    Description = "",
    Values = _G.AllMutations,
    Multi = true,
    Default = {"All"},
})

local v3 = Tabs.main:AddDropdown("MultiDropdown", {
    Title = "Select Ignore Fruit",
    Description = "",
    Values = _G.dropdownValues2,
    Multi = true,
    Default = {"None"},
})

local MinKGInput = Tabs.main:AddInput("InputKG", {
    Title = "Minimum KG",
    Default = "0",
    Placeholder = "Enter KG",
    Numeric = true,
})

MinKGInput:OnChanged(function(v)
    local num = tonumber(v)
    if num then
        _G.MinWeightKG = math.floor(num)
        print("[DEBUG] MinWeightKG di-set ke:", _G.MinWeightKG)
    else
        warn("[WARNING] Input bukan angka valid:", v)
    end
end)


--[[ Input KG Minimum
local inputKG = Tabs.main:AddInput("MinWeightKG", {
    Title = "Minimum KG",
    Default = "0",
    Placeholder = "Enter whole number",
    Numeric = true,
    Finished = true,
    Callback = function(value)
        local numberOnly = tonumber(string.match(value, "^%d+"))
        _G.MinWeightKG = numberOnly or 0

    end
})
]]--

-- Dropdown Above / Below
local kgCompareDropdown = Tabs.main:AddDropdown("KGCompare", {
    Title = "Set KG Compare",
    Values = { "Above", "Below" },
    Multi = false,
    Default = 2,
})

kgCompareDropdown:OnChanged(function(Value)
    _G.WeightCompareType = value
end)

v1:OnChanged(function(Value)
    local result = {}

    for nameWithCount, state in pairs(Value) do
        if state == true and typeof(nameWithCount) == "string" then
            local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
            table.insert(result, fruitName)
        end
    end

    _G.AllowedFruits = result
    --print("[DEBUG] AllowedFruits:", table.concat(result, ", "))
end)

v2:OnChanged(function(Value)
    local result = {}
    for key, state in pairs(Value) do
        if state then
            table.insert(result, key)
        end
    end
    _G.AllowedMutations = result
end)

v3:OnChanged(function(Value)
    local result = {}
    for key, state in pairs(Value) do
        if state then
            table.insert(result, key)
        end
    end
    _G.AvoidFruits = result
end)

v3x:OnChanged(function(Value)
    _G.MethodHTV = Value
end)

Tabs.main:AddButton({
    Title = "Refresh Fruit",
    Description = "",
    Callback = function()
        local counts = GetFruitCounts()
        local newValues1 = {"All"}
        local newValues2 = {"None"}
        for name, count in pairs(counts) do
            table.insert(newValues1, name .. " x" .. count)
            table.insert(newValues2, name)
        end
        v1:SetValues(newValues1)
        v3:SetValues(newValues2)
    end
})

Tabs.main:AddToggle("MyToggle", {Title = "Auto Harvest Fruit", Default = false }):OnChanged(function(state)
    if state then
        wait(2)
		HarvestFruits(_G.MethodHTV)  -- atau "PickUp Aura"
	end
end)

Tabs.main:AddSection("#-----#")

-- Dropdown untuk memilih whitelist buah
local dropdownWhitelist = Tabs.main:AddDropdown("WhiteListDropdown", {
    Title = "Whitelist Fruits",
    Description = "Pilih buah yang ingin dipanen",
    Values = _G.dropdownValues1,
    Multi = true,
    Default = {},
})

-- Handler saat whitelist diubah
dropdownWhitelist:OnChanged(function(Value)
    local result = {}

    for nameWithCount, state in pairs(Value) do
        if state == true and typeof(nameWithCount) == "string" then
            local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
            table.insert(result, fruitName)
        end
    end

    _G.AvoidFruits = "None"
    _G.AllowedFruits = result
end)

-- Tombol untuk refresh isi dropdown whitelist
Tabs.main:AddButton({
    Title = "Refresh Whitelist",
    Description = "",
    Callback = function()
        local counts = GetFruitCounts()
        local newValues1 = { "All" }
        for name, count in pairs(counts) do
            table.insert(newValues1, name .. " x" .. count)
        end
        dropdownWhitelist:SetValues(newValues1)
    end
})

Tabs.main:AddToggle("WhitelistHarvestToggle", {
    Title = "Auto Harvest Whitelist",
    Default = false
}):OnChanged(function(state)
    if state then
        wait(2)
        HarvestFruits2(_G.MethodHTV)
    end
end)

Tabs.main:AddSection("#-----[PLANT]-----#");

local v4CDSD = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Fruit",
    Values = GetBackpackSeeds(),
    Multi = false,
    Default = 1,
})

v4CDSD:OnChanged(function(Value)
    local cleaned = Value:match("^(.-) Seed")
	_G.SelectedSeedName = cleaned
end)

local v4XZSDDDDD = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Method",
    Values = {"Player Pos", "Random Pos"},
    Multi = false,
    Default = 1,
})

v4XZSDDDDD:OnChanged(function(Value)
    _G.PlantMode = Value
end)

local paragraphXDXS2 = Tabs.main:AddParagraph({
	Title = "Rc Hub, Auto Plant Location",
	Content = "📌 Target : 0, 0, 0"
})

Tabs.main:AddButton({
    Title = "Set Location",
    Description = "Method : Player Pos",
    Callback = function()
        if _G.PlantMode == "Player Pos" then
     	   local root = Character:FindFirstChild("HumanoidRootPart")
			if root then
				_G.TargetLocationXD = root.CFrame
                local locText = (_G.TargetLocationXD and tostring(_G.TargetLocationXD.Position)) or "0, 0, 0"
		        paragraphXDXS2:SetDesc("📌 Target : " .. locText)
			end
        else
            Fluent:Notify({
                Title = "Rc Hub, Auto Plant",
                Content = "Set Location Only Method (Player Pos)",
                Duration = 3
            })
        end
    end
})

Tabs.main:AddToggle("MyToggle", {Title = "Auto Plant", Default = false }):OnChanged(function(Value)
    _G.AutoPlant = Value
end)

task.spawn(function()
	while task.wait() do
		if _G.AutoPlant and _G.SelectedSeedName then
			local equipped = EquipSeed(_G.SelectedSeedName)
			if equipped then
				for i = 1, 5 do
					local pos
					if _G.PlantMode == "Player Pos" then
						pos = _G.TargetLocationXD and _G.TargetLocationXD.Position
					else
						pos = getRandomPoint()
					end

					if pos then
						GameEvents.Plant_RE:FireServer(pos, _G.SelectedSeedName)
					end
				end
			end
		end
	end
end)

Tabs.main:AddSection("#-----[MOVE PLANT]-----#");

_G.selectedTreeXX = nil

local v4ZX = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Plant",
    Values = GetTreeTypes(),
    Multi = false,
    Default = 1,
})

v4ZX:OnChanged(function(Value)
    _G.selectedTreeXX = Value:match("^(.-) x") or Value
end)

local paragraphXDXS = Tabs.main:AddParagraph({
	Title = "Rc Hub, Move Plant Location",
	Content = "📌 Target : 0, 0, 0"
})

Tabs.main:AddButton({
    Title = "Set Location Move Plant",
    Description = "",
    Callback = function()
        SetTargetLocation()
    end
})

Tabs.main:AddButton({
    Title = "Start Move Plant",
    Description = "",
    Callback = function()
        MoveAllTrees()
    end
})

task.spawn(function()
	while task.wait() do
		local locText = (_G.TargetLocation and tostring(_G.TargetLocation.Position)) or "0, 0, 0"
		paragraphXDXS:SetDesc("📌 Target : " .. locText)
	end
end)

Tabs.main:AddSection("#-----[SHOVEL FEATURE]-----#");

local v5XC = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Tree",
    Values = _G.TreeCount,
    Multi = false,
    Default = 1,
})

v5XC:OnChanged(function(nameWithCount)
    if typeof(nameWithCount) == "string" then
        local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
        _G.ShovelTargetTREE = fruitName
    end
end)

Tabs.main:AddButton({
    Title = "Refresh Tree",
    Description = "",
    Callback = function()
        local counts = GetTreeCounts()
        local newValues1 = {}
        for name, count in pairs(counts) do
            table.insert(newValues1, name .. " x" .. count)
        end
        v5XC:SetValues(newValues1)
    end
})

Tabs.main:AddToggle("MyToggle", {Title = "Auto Shovel [TREE]", Default = false }):OnChanged(function(s)
    if s then
        ShovelTREE()
    end
end)

Tabs.main:AddSection("#-----#");

local v5XCC = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Fruit",
    Values = _G.dropdownValues1,
    Multi = false,
    Default = 1,
})

v5XCC:OnChanged(function(nameWithCount)
    if typeof(nameWithCount) == "string" then
        local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
        _G.ShoveltargetFRUIT = fruitName
    end
end)

local MinKGInputXX = Tabs.main:AddInput("InputKG", {
    Title = "Minimum KG",
    Default = "0",
    Placeholder = "Enter KG",
    Numeric = true,
})

MinKGInputXX:OnChanged(function(v)
    local num = tonumber(v)
    if num then
        _G.TargetKG = math.floor(num)
        print("[DEBUG] MinWeightKG di-set ke:", _G.TargetKG)
    else
        warn("[WARNING] Input bukan angka valid:", v)
    end
end)

-- Dropdown Above / Below
local kgCompareDropdownX = Tabs.main:AddDropdown("KGCompare", {
    Title = "Set KG Compare",
    Values = { "Above", "Below" },
    Multi = false,
    Default = 2,
})

kgCompareDropdownX:OnChanged(function(Value)
    _G.WeightCompareType2 = value
end)

Tabs.main:AddButton({
    Title = "Refresh Fruit",
    Description = "",
    Callback = function()
        local counts = GetFruitCounts()
        local newValues1 = {}
        for name, count in pairs(counts) do
            table.insert(newValues1, name .. " x" .. count)
        end
        v5XCC:SetValues(newValues1)
    end
})

Tabs.main:AddToggle("MyToggle", { Title = "Auto Shovel [FRUIT]", Default = false }):OnChanged(function(s)
    if s then
        ShovelFRUIT()
    end
end)

Tabs.main:AddSection("#-----[SPRINKLER]-----#");

local kgCompareDropdownXCF = Tabs.main:AddDropdown("MultiDropdown", {
    Title = "Select Sprinkler",
    Description = "",
    Values = _G.SprinkList,
    Multi = true,
    Default = {},
})

kgCompareDropdownXCF:OnChanged(function(Value)
    local result = {}

    for nameWithCount, state in pairs(Value) do
        if state == true and typeof(nameWithCount) == "string" then
            local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
            table.insert(result, fruitName)
        end
    end

    _G.SprinkSelect = result
end)

local paragraphXDXSZX = Tabs.main:AddParagraph({
    Title = "Rc Hub, Sprinkler Location",
    Content = "📌 Target : 0, 0, 0"
})

Tabs.main:AddButton({
    Title = "Set Location Sprinkler",
    Description = "",
    Callback = function()
        SetTargetLocation()
    end
})

task.spawn(function()
    while task.wait() do
        local locText = (_G.TargetLocation and tostring(_G.TargetLocation.Position)) or "0, 0, 0"
        paragraphXDXSZX:SetDesc("📌 Target : " .. locText)
    end
end)

Tabs.main:AddToggle("MyToggle", { Title = "Auto Place Sprinkler", Default = false }):OnChanged(function(s)
    if s then
        TryPlaceSprinklers()
    end
end)

Tabs.main:AddSection("#-----[RECLAIMER]-----#");

local kgCompareDropdownXCFDX = Tabs.main:AddDropdown("MultiDropdown", {
    Title = "Select Tree",
    Description = "",
    Values = _G.TreeCount,
    Multi = true,
    Default = {},
})

kgCompareDropdownXCFDX:OnChanged(function(Value)
    local result = {}

    for nameWithCount, state in pairs(Value) do
        if state == true and typeof(nameWithCount) == "string" then
            local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
            table.insert(result, fruitName)
        end
    end

    _G.SelectTreeRC = result
end)

Tabs.main:AddButton({
    Title = "Refresh Tree",
    Description = "",
    Callback = function()
        local counts = GetTreeCounts()
        local newValues1 = {}
        for name, count in pairs(counts) do
            table.insert(newValues1, name .. " x" .. count)
        end
        kgCompareDropdownXCFDX:SetValues(newValues1)
    end
})

Tabs.main:AddToggle("MyToggle", { Title = "Auto Reclaimer", Default = false }):OnChanged(function(s)
    if s then
        AutoReclaimSelectedTrees()
    end
end)

Tabs.main:AddSection("#-----[WATER CAN]-----#");

local v5XXZ = Tabs.main:AddDropdown("Dropdown", {
    Title = "Select Tree",
    Values = _G.TreeCount,
    Multi = false,
    Default = 1,
})

v5XXZ:OnChanged(function(nameWithCount)
    if typeof(nameWithCount) == "string" then
        local fruitName = nameWithCount:match("^(.-) x%d+$") or nameWithCount
        _G.ShovelTargetTREE = fruitName
    end
end)

Tabs.main:AddToggle("MyToggle", { Title = "Auto Water Can", Default = false }):OnChanged(function()
    print("Toggle changed:", Options.MyToggle.Value)
end)

Tabs.main:AddSection("#-----[SELL]-----#");

Tabs.main:AddButton({
    Title = "Sell Fruit In Hand",
    Description = "",
    Callback = function()
        
    end
})

Tabs.main:AddButton({
    Title = "Sell All Inventory",
    Description = "",
    Callback = function()
        
    end
})

-- [EVENT] \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\

Tabs.event:AddSection("Dino Quest Status");

local tasksFolder = player.PlayerGui:WaitForChild("DinoQuests_UI").Frame.Main.Holder.Tasks
local paragraphList = {}

for i = 1, 3 do
	local paragraph = Tabs.event:AddParagraph({
		Title = "📌 Task " .. i,
		Content = "📊 Progress: -"
	})
	table.insert(paragraphList, paragraph)
end

local function UpdateQuestParagraphs()
	local segments = tasksFolder:GetChildren()
	local index = 1

	for _, segment in ipairs(segments) do
		if segment.Name == "Segment" and paragraphList[index] then
			local taskLabel = segment:FindFirstChild("TASK_NAME")
			local progressLabel = segment:FindFirstChild("PROGRESS")

			if taskLabel and progressLabel then
				local title = "📌 " .. taskLabel.Text
				local content = "📊 Progress: " .. progressLabel.Text
				paragraphList[index]:SetTitle(title)
				paragraphList[index]:SetDesc(content)
			end

			index += 1
		end
	end
end

task.spawn(function()
	while true do
		pcall(UpdateQuestParagraphs)
		wait(1)
	end
end)

Tabs.event:AddButton({
    Title = "Claim Progres Quest",
    Description = "Only Claim Complete Progress",
    Callback = function()
        ClaimAvailableDinoQuests()
    end
})

Tabs.event:AddSection("Dino Craft");

local v3xZ = Tabs.event:AddDropdown("Dropdown", {
    Title = "Select Craft",
    Values = {"Mutation Spray Amber", "Ancient Seed Pack", "Dino Create"},
    Multi = false,
    Default = 2,
})

v3xZ:OnChanged(function(Value)
    _G.SelectCRAT = Value
end)

local coX = Tabs.event:AddParagraph({
    Title = "Waiting Select...",
    Content = "Waiting Select..."
})

task.spawn(function()
	while task.wait() do
        local selected = _G.SelectCRAT
        if selected == nil then
            coX:SetTitle("Nothing")
            coX:SetDesc("Nothing")
        elseif selected == "Mutation Spray Amber" then
            coX:SetTitle(selected)
            coX:SetDesc("Cleaning Spray, Dinosaurus Egg, 1M Sheckles")
        elseif selected == "Ancient Seed Pack" then
            coX:SetTitle(selected)
            coX:SetDesc("Dinosaurus Egg, 5,5M Sheckles")
        elseif selected == "Dino Create" then
            coX:SetTitle(selected)
            coX:SetDesc("Dinosaurus Egg, 5,5M Sheckles")
        end
    end
end)

Tabs.event:AddButton({
    Title = "Craft Item",
    Description = "Select First Before Click This",
    Callback = function()
        local selected = _G.SelectCRAT
        if selected == nil then
            Fluent:Notify({
                Title = "Rc Hub",
                Content = "Please, Select Craft First",
                Duration = 3
            })
        elseif selected == "Mutation Spray Amber" then
            DoCrafting(selected, { "Cleaning Spray", "Dinosaurus Egg" })
        elseif selected == "Ancient Seed Pack" then
            DoCrafting(selected, { "Dinosaurus Egg" })
        elseif selected == "Dino Create" then
            DoCrafting(selected, { "Dinosaurus Egg" })
        end
    end
})

Tabs.shop:AddSection("Buy Shop");

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer

local Remotes = {
    Seed = ReplicatedStorage.GameEvents.BuySeedStock,
    Gear = ReplicatedStorage.GameEvents.BuyGearStock,
    Cosmetic = ReplicatedStorage.GameEvents.BuyCosmeticItem,
    Egg = ReplicatedStorage.GameEvents.BuyPetEgg,
	Event = ReplicatedStorage.GameEvents.BuyEventShopStock,
	Merchant = ReplicatedStorage.GameEvents.BuyTravelingMerchantShopStock,
}

-- Global tables for selected values
_G.SelectedSeeds = {}
_G.SelectedGears = {}
_G.SelectedCosmetics = {}
_G.SelectedEggModels = {}
_G.AutoBuyEnabled = false

-- Utility: get shop item list from GUI (for seed, gear, egg)
local function getShopListFromFrame(container)
    local list = {"All"}
    for _, frame in ipairs(container:GetChildren()) do
        if frame:IsA("Frame") and not tostring(frame.Name):lower():find("padding") then
            table.insert(list, frame.Name)
        end
    end
    return list
end

-- Utility: get cosmetic list from module
local function getAllCosmeticNamesFromData()
    local names = {"All"}
    local crateData = require(ReplicatedStorage.Data.CosmeticCrateShopData)
    local itemData = require(ReplicatedStorage.Data.CosmeticItemShopData)

    for name, _ in pairs(crateData) do table.insert(names, name) end
    for name, _ in pairs(itemData) do table.insert(names, name) end

    return names
end

-- Utility: get egg model names
local function getEggModelList()
    local list = {"All"}
    local frame = player.PlayerGui:WaitForChild("PetShop_UI").Frame.ScrollingFrame
    for _, frameChild in ipairs(frame:GetChildren()) do
        if frameChild:IsA("Frame") and not frameChild.Name:lower():find("padding") then
            table.insert(list, frameChild.Name)
        end
    end
    return list
end

-- Create dropdowns
local seedDropdown = Tabs.shop:AddDropdown("SeedDrop", {
    Title = "Seeds",
    Multi = true,
    Values = getShopListFromFrame(player.PlayerGui.Seed_Shop.Frame.ScrollingFrame),
    Default = {"All"},
})
seedDropdown:OnChanged(function(val) _G.SelectedSeeds = val end)

local gearDropdown = Tabs.shop:AddDropdown("GearDrop", {
    Title = "Gears",
    Multi = true,
    Values = getShopListFromFrame(player.PlayerGui.Gear_Shop.Frame.ScrollingFrame),
    Default = {"All"},
})
gearDropdown:OnChanged(function(val) _G.SelectedGears = val end)

local cosmeticDropdown = Tabs.shop:AddDropdown("CosmeticDrop", {
    Title = "Cosmetics",
    Multi = true,
    Values = _G.AllShopCosmetic,
    Default = {"All"},
})
cosmeticDropdown:OnChanged(function(val) _G.SelectedCosmetics = val end)

local eggDropdown = Tabs.shop:AddDropdown("EggDrop", {
    Title = "Eggs",
    Multi = true,
    Values = getEggModelList(),
    Default = {"All"},
})
eggDropdown:OnChanged(function(val) _G.SelectedEggModels = val end)

local ZenDropdown = Tabs.shop:AddDropdown("ZenDrop", {
    Title = "Event",
    Multi = true,
    Values = _G.AllEvent,
    Default = {"All"},
})
ZenDropdown:OnChanged(function(val) _G.SelectedZenModels = val end)

local MerchantDropdown = Tabs.shop:AddDropdown("MerchantDrop", {
    Title = "Merchant",
    Multi = true,
    Values = _G.AllMerchant,
    Default = {"All"},
})
MerchantDropdown:OnChanged(function(val) _G.SelectedMerchantModels = val end)

-- Try buying helper
local function tryBuy(remote, item)
    pcall(function()
        remote:FireServer(item)
    end)
end

spawn(function()
    while true do
        if _G.AutoBuyEnabled then
            -- Buy Eggs
            local frame = player.PlayerGui:WaitForChild("PetShop_UI").Frame.ScrollingFrame
            for _, frameChild in ipairs(frame:GetChildren()) do
                if frameChild:IsA("Frame") and not frameChild.Name:lower():find("padding") then
                    local stockText = frameChild:FindFirstChild("Main_Frame") and frameChild.Main_Frame:FindFirstChild("Stock_Text")
                    if stockText and not stockText.Text:find("X0") then
                        if table.find(_G.SelectedEggModels, "All") or table.find(_G.SelectedEggModels, frameChild.Name) then
                            tryBuy(Remotes.Egg, frameChild.Name)
                        end
                    end
                end
            end

            -- Buy Seeds
            local seedFrame = player.PlayerGui.Seed_Shop.Frame.ScrollingFrame
            for _, frame in ipairs(seedFrame:GetChildren()) do
                if frame:IsA("Frame") and not frame.Name:lower():find("padding") then
                    local stock = frame.Main_Frame:FindFirstChild("Stock_Text")
                    if stock and not stock.Text:find("X0") then
                        if table.find(_G.SelectedSeeds, "All") or table.find(_G.SelectedSeeds, frame.Name) then
                            tryBuy(Remotes.Seed, frame.Name)
                        end
                    end
                end
            end

            -- Buy Gears
            local gearFrame = player.PlayerGui.Gear_Shop.Frame.ScrollingFrame
            for _, frame in ipairs(gearFrame:GetChildren()) do
                if frame:IsA("Frame") and not frame.Name:lower():find("padding") then
                    local stock = frame.Main_Frame:FindFirstChild("Stock_Text")
                    if stock and not stock.Text:find("X0") then
                        if table.find(_G.SelectedGears, "All") or table.find(_G.SelectedGears, frame.Name) then
                            tryBuy(Remotes.Gear, frame.Name)
                        end
                    end
                end
            end

            -- Buy Cosmetics
            for _, name in ipairs(_G.SelectedCosmetics) do
                if name == "All" then
					local InfoItem = _G.AllShopCosmetic
                    local bought = {}
                    for itemName, _ in pairs(InfoItem) do
                        tryBuy(Remotes.Cosmetic, itemName)
                        bought[itemName] = true
                    end
                else
                    tryBuy(Remotes.Cosmetic, name)
                end
            end

			for _, name in ipairs(_G.SelectedZenModels) do
                if name == "All" then
					local InfoItem = _G.AllEvent
                    local bought = {}
                    for itemName, _ in pairs(InfoItem) do
                        tryBuy(Remotes.Event, itemName)
                        bought[itemName] = true
                    end
                else
                    tryBuy(Remotes.Event, name)
                end
            end

			for _, name in ipairs(_G.SelectedMerchantModels) do
                if name == "All" then
					local InfoItem = _G.AllMerchant
                    local bought = {}
                    for itemName, _ in pairs(InfoItem) do
                        tryBuy(Remotes.Merchant, itemName)
                        bought[itemName] = true
                    end
                else
                    tryBuy(Remotes.Merchant, name)
                end
            end
        end
        task.wait(.7)
    end
end)

Tabs.shop:AddToggle("MyToggle", {Title = "Auto Buy Select", Default = false }):OnChanged(function(state)
    _G.AutoBuyEnabled = state
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local CraftEvent = ReplicatedStorage.GameEvents.CraftingGlobalObjectService
local CraftModule = require(ReplicatedStorage.Data.CraftingData.CraftingRecipeRegistry)
local CraftingData = CraftModule.ItemRecipes -- 👈 pakai yang benar

-- Ambil kategori dan meja kerja
local function getWorkbench(machineTypes)
    for _, machine in ipairs(machineTypes or {}) do
        if machine == "GearEventWorkbench" then
            return "Gear", Workspace.CraftingTables.EventCraftingWorkBench, "GearEventWorkbench"
        elseif machine == "SeedEventWorkbench" then
            return "Seed", Workspace.CraftingTables.SeedEventCraftingWorkBench, "SeedEventWorkbench"
        elseif machine == "DinoEventWorkbench" then
            return "Dino", Workspace.CraftingTables.DinoEventWorkbench, "DinoEventWorkbench"
        end
    end
    return nil
end

-- Ambil UUID item dari Backpack
local function cleanWords(str)
    return string.lower(str):gsub("[%p%c]", "") -- hilangkan karakter aneh, biarkan spasi
end

local function BpUuid(nameToFind)
    local Backpack = LocalPlayer:WaitForChild("Backpack")
    nameToFind = cleanWords(nameToFind)

    for _, item in ipairs(Backpack:GetChildren()) do
        local rawName = item.Name
        local strippedName = rawName:match("^(.-)%s*%[") or rawName
        local cleanName = cleanWords(strippedName)

        local match = true
        for word in nameToFind:gmatch("%S+") do
            if not cleanName:find(word) then
                match = false
                break
            end
        end

        if match then
            local uuid = item:GetAttribute("c")
            return tostring(uuid)
        end
    end

    return nil
end

-- Server fire
local function SetRecipe(tableRef, tableId, recipeName)
    CraftEvent:FireServer("SetRecipe", tableRef, tableId, recipeName)
end

local function InputItem(tableRef, tableId, slot, itemType, uuid)
    CraftEvent:FireServer("InputItem", tableRef, tableId, slot, {
        ItemType = itemType,
        ItemData = { UUID = uuid }
    })
end

local function StartCraft(tableRef, tableId)
    CraftEvent:FireServer("Craft", tableRef, tableId)
end

local function FindRecipeByName(name)
    name = string.lower(name)
    for recipeName, data in pairs(CraftingData) do
        if string.lower(recipeName) == name then
            local category, tableRef, tableId = getWorkbench(data.MachineTypes)
            if category then
                return {
                    RecipeName = recipeName,
                    Category = category,
                    TableRef = tableRef,
                    TableId = tableId,
                    Inputs = data.Inputs
                }
            end
        end
    end
    return nil
end

-- Fungsi utama
function AutoCraft()
    local selectedName = _G.Craft
    if not selectedName then
        warn("Set _G.Craft dulu ke nama recipe")
        return
    end

    local recipeData = FindRecipeByName(selectedName)
    if not recipeData then
        warn("Recipe tidak ditemukan atau tidak cocok:", selectedName)
        return
    end

    SetRecipe(recipeData.TableRef, recipeData.TableId, recipeData.RecipeName)

    for i, input in ipairs(recipeData.Inputs or {}) do
        local itemName = input.ItemData.ItemName
        local uuid = BpUuid(itemName)
        if uuid then
            InputItem(recipeData.TableRef, recipeData.TableId, i, input.ItemType, uuid)
        else
            warn(" RC HUB | Item tidak ditemukan di Backpack:", itemName)
        end
    end

    StartCraft(recipeData.TableRef, recipeData.TableId)
end

Tabs.craft:AddSection("Craft Gear & Seed")

local PetDropdownXXZ = Tabs.craft:AddDropdown("Dropdown", {
    Title = "Select Gear",
    Values = _G.ListCraftGear,
    Multi = false,
    Default = 1,
})

PetDropdownXXZ:OnChanged(function(selected)
    _G.SelectedCraft1 = selected
end)

Tabs.craft:AddToggle("MyToggle", { Title = "Auto Craft Gear", Default = false }):OnChanged(function(state)
    _G.AutoCraftXXX = state
end)

local PetDropdownXXX = Tabs.craft:AddDropdown("Dropdown", {
    Title = "Select Seed",
    Values = _G.ListCraftSeed,
    Multi = false,
    Default = 1,
})

PetDropdownXXX:OnChanged(function(selected)
    _G.SelectedCraft2 = selected
end)

Tabs.craft:AddToggle("MyToggle", { Title = "Auto Craft Seed", Default = false }):OnChanged(function(state)
    _G.AutoCraftXX = state
end)

task.spawn(function()
    while task.wait(1) do
        if _G.AutoCraftXX then
            _G.Craft = _G.SelectedCraft2
            AutoCraft()
        end
        if _G.AutoCraftXXX then
            _G.Craft = _G.SelectedCraft1
            AutoCraft()
        end
    end
end)

Tabs.pet:AddSection("#-----[PET SLOT]-----#")

Tabs.pet:AddParagraph({
    Title = "RcHub | Pet Slot",
    Content = "Put Name And CLick Save For Saving Pet\n Select Load Pet and Click Load For Load"
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local PetsFolder = Workspace:WaitForChild("PetsPhysical")
local PetEvent = ReplicatedStorage.GameEvents.PetsService

local SAVE_PATH = "RcHub/GrowAGarden/PetSlotData"

local function loadPetSlotData()
    if isfile(SAVE_PATH) then
        local content = readfile(SAVE_PATH)
        local success, data = pcall(function()
            return HttpService:JSONDecode(content)
        end)
        if success and type(data) == "table" then
            return data
        end
    end
    return {}
end

_G.PetSlotSave = loadPetSlotData()

local function savePetSlotData()
    writefile(SAVE_PATH, HttpService:JSONEncode(_G.PetSlotSave))
end

local MinKGInputXXD = Tabs.pet:AddInput("InputKG", {
    Title = "Set Name Pet Slot",
    Default = "RcHub",
    Placeholder = "Set Name",
    Numeric = false,
})

MinKGInputXXD:OnChanged(function(v)
    _G.CurrentPetSlotName = v
end)

Tabs.pet:AddButton({
    Title = "Save Pet Slot",
    Callback = function()
        local savedUUIDs = {}

        for _, pet in ipairs(PetsFolder:GetChildren()) do
            if pet:IsA("Part") and pet:GetAttribute("OWNER") == LocalPlayer.Name then
                local uuid = pet:GetAttribute("UUID")
                if uuid then
                    table.insert(savedUUIDs, uuid)
                end
            end
        end

        if _G.CurrentPetSlotName and #savedUUIDs > 0 then
            _G.PetSlotSave[_G.CurrentPetSlotName] = savedUUIDs
            savePetSlotData()
            print("✅ Pet slot saved:", _G.CurrentPetSlotName)
        else
            warn("⚠️ Failed to save slot. Make sure name is set and pets exist.")
        end
    end
})

local PetDropdownXXXT = Tabs.pet:AddDropdown("Dropdown", {
    Title = "Select Pet Slot",
    Values = {},
    Multi = false,
    Default = 1,
})

PetDropdownXXXT:OnChanged(function(selected)
    _G.SelectedSlotToLoad = selected
end)

Tabs.pet:AddButton({
    Title = "Load Pet Slot",
    Callback = function()
        local slotName = _G.SelectedSlotToLoad
        local saved = _G.PetSlotSave[slotName]

        if saved then
            -- Unequip semua dulu
            for _, pet in ipairs(PetsFolder:GetChildren()) do
                if pet:IsA("Part") and pet:GetAttribute("OWNER") == LocalPlayer.Name then
                    local uuid = pet:GetAttribute("UUID")
                    if uuid then
                        PetEvent:FireServer("UnequipPet", uuid)
                    end
                end
            end

            task.wait(1)

            local function startsWith(full, part)
                return string.sub(full, 1, #part) == part
            end

            -- Equip kembali yang tersimpan
            for _, uuid in ipairs(saved) do
                local shortUuid = string.sub(uuid, 1, 8) -- ambil 8 karakter depan
                print("🔍 Mencari tool dengan UUID depan:", shortUuid)

                local foundTool = false
                for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
                    if tool:IsA("Tool") then
                        local toolUuid = tool:GetAttribute("c")
                        if toolUuid then
                            local toolShort = string.sub(toolUuid, 1, 8)

                            print("🧰 Tool:", tool.Name, "| UUID depan:", toolShort)

                            if startsWith(toolShort, shortUuid) then
                                foundTool = true
                                print("✅ Tool ditemukan:", tool.Name, "| Equip ke tangan")

                                -- Equip tool ke tangan
                                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):EquipTool(tool)

                                -- Kirim remote EquipPet
                                local cframe = getRandomPoint()
                                print("📡 Mengirim remote EquipPet untuk:", uuid)
                                PetEvent:FireServer("EquipPet", uuid, cframe)
                                break
                            end
                        end
                    end
                end

                if not foundTool then
                    warn("❌ Tool dengan UUID depan tidak ditemukan:", shortUuid)
                end
            end

            print("🐾 Loaded pet slot:", slotName)
        else
            warn("⚠️ No pet slot data found for:", slotName)
        end
    end
})

task.spawn(function()
    while true do
        task.wait(2)
        local names = {}
        for name in pairs(_G.PetSlotSave) do
            table.insert(names, name)
        end
        PetDropdownXXXT:SetValues(names)
    end
end)

Tabs.misc:AddSection("#-----[SPRINKLER]-----#")

Tabs.misc:AddButton({
    Title = "Deleate All Sprinkler",
    Callback = function()
        DeleteMySprinklers()
    end
})

Tabs.misc:AddSection("#-----[MIDDLE PET]-----#")

local PetsFolder = workspace:WaitForChild("PetsPhysical")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

_G.SelectedPetUUID = nil
_G.AutoIdleEnabled = false
_G.PetNameToUUID = {}

-- Fungsi ambil semua pet milik pemain
local function GetMyPets()
    local pets = {}
    for _, pet in ipairs(PetsFolder:GetChildren()) do
        if pet:IsA("Part") then
            local uuid = pet:GetAttribute("UUID")
            local owner = pet:GetAttribute("OWNER")
            if uuid and owner and owner == LocalPlayer.Name then
                table.insert(pets, uuid)
            end
        end
    end
    return pets
end

local PetDropdown = Tabs.misc:AddDropdown("MultiDropdown", {
    Title = "Select Pet",
    Description = "",
    Values = GetMyPets(),
    Multi = true,
    Default = {},
})

PetDropdown:OnChanged(function(selected)
    _G.SelectedPetUUID = selected
end)

Tabs.misc:AddButton({
    Title = "Refresh Pet",
    Callback = function()
        PetDropdown:SetValues(GetMyPets())
    end
})

Tabs.misc:AddToggle("MyToggle", { Title = "Auto Middle Pet", Default = false }):OnChanged(function(state)
    _G.AutoIdleEnabled = state
end)

task.spawn(function()
    while task.wait() do
        if _G.AutoIdleEnabled then
            local selected = _G.SelectedPetUUID
            if type(selected) == "string" then
                ReplicatedStorage.GameEvents.ActivePetService:FireServer("SetPetState", selected, "Idle")
            elseif type(selected) == "table" then
                for uuid, _ in pairs(selected) do
                    ReplicatedStorage.GameEvents.ActivePetService:FireServer("SetPetState", uuid, "Idle")
                end
            else
                print("RC HUB | Eror : Format Unknown (Middle Pet)")
            end
        end
    end
end)

N("RC HUB | BEST FREE SCRIPT")

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("RcHub")
SaveManager:SetFolder("RcHub/GrowAGarden")
InterfaceManager:BuildInterfaceSection(Tabs.ui)
SaveManager:BuildConfigSection(Tabs.ui)
Window:SelectTab(1)

N("Enjoy The Script ;)")

SaveManager:LoadAutoloadConfig()
